<?php


function generateBarcode($length = 13) {
    $number = mt_rand(1, 9);
    for ($i = 1; $i < $length; $i++) {
        $number .= mt_rand(0, 9);
    }
    return $number;
}

// Функция для случайной эмуляции ответа от API
function mockApiResponse($url) {
    $responses = [
        'https://api.site.com/book' => [
            ['message' => 'order successfully booked'],
            ['error' => 'booking failed']
        ],
        'https://api.site.com/approve' => [
            ['message' => 'order successfully approved'],
            ['error' => 'event cancelled'],
            ['error' => 'no tickets'],
            ['error' => 'no seats'],
            ['error' => 'fan removed']
        ]
    ];

    // Случайный выбор ответа
    return $responses[$url][array_rand($responses[$url])];
}


function addOrder($event_id, $event_date, $ticket_adult_price, $ticket_adult_quantity, $ticket_kid_price, $ticket_kid_quantity) {
    $maxRetries = 3; // Максимальное количество попыток для отправки данных на book
    $attempt = 0;
    $created = date('Y-m-d H:i:s');
    $user_id = '1';
    $equal_price = '1';

    do {
        $barcode = generateBarcode(); // Генерация нового баркода при каждой попытке

        // Подготовка данных для отправки
        $data = [
            'event_id' => $event_id,
            'event_date' => $event_date,
            'ticket_adult_price' => $ticket_adult_price,
            'ticket_adult_quantity' => $ticket_adult_quantity,
            'ticket_kid_price' => $ticket_kid_price,
            'ticket_kid_quantity' => $ticket_kid_quantity,
            'barcode' => $barcode
        ];

        // Шаг 1: Отправляем запрос на book и проверяем ответ
        $bookResponse = mockApiResponse('https://api.site.com/book');

        if (isset($bookResponse['message']) && $bookResponse['message'] === 'order successfully booked') {
            // Если запрос book успешен, отправляем на approve
            $approveResponse = mockApiResponse('https://api.site.com/approve');

            if (isset($approveResponse['message']) && $approveResponse['message'] === 'order successfully approved') {
                $mysql = new mysqli('localhost', 'root', 'root', 'admin_finpayx');

                if ($mysql->connect_error) {
                    return ['status' => 'error', 'message' => 'Database connection failed'];
                }

                $query = "INSERT INTO orders_list (event_id, event_date, ticket_adult_price, ticket_adult_quantity, ticket_kid_price, ticket_kid_quantity, barcode, user_id, equal_price, created) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt = $mysql->prepare($query);
                $stmt->bind_param("isiiiisiis", $event_id, $event_date, $ticket_adult_price, $ticket_adult_quantity, $ticket_kid_price, $ticket_kid_quantity, $barcode, $user_id, $equal_price, $created);

                if ($stmt->execute()) {
                    $stmt->close();
                    $mysql->close();
                    return ['status' => 'success', 'message' => 'Order successfully saved'];
                } else {
                    $stmt->close();
                    $mysql->close();
                    return ['status' => 'error', 'message' => 'Database update failed'];
                }
            } else {
                // Ошибка на этапе approve
                return ['status' => 'error', 'message' => '' . ($approveResponse['error'] ?? 'Unknown error')];
            }
        }

        $attempt++;
    } while ($attempt < $maxRetries && isset($bookResponse['error'])); // Повторяем при ошибке от book

    // Если все попытки исчерпаны
    return ['status' => 'error', 'message' => 'Booking failed after ' . $maxRetries . ' attempts'];
}


$response = addOrder(1, '2024-11-01', 50.0, 2, 25.0, 1, 123);  // вносим данные для функции
echo json_encode($response);







?>
